"""
HubAssembly datatype
"""
import logging
import os
import sys
import urllib
from cgi import escape

from galaxy import util
from galaxy.datatypes import metadata
from galaxy.datatypes.text import Text
from galaxy.datatypes.metadata import MetadataElement
from galaxy.datatypes.sniff import get_headers
from galaxy.util.json import dumps

from galaxy.datatypes.images import Html
from galaxy.datatypes.tabular import Tabular
from galaxy.util import nice_size
from galaxy.web import url_for


from galaxy.datatypes.genetics import RexpBase

import dataproviders

log = logging.getLogger(__name__)


class HubAssembly( Text ):
    """
    derived class for BioC data structures in Galaxy
    """

    # MetadataElement( name="columns", default=0, desc="Number of columns", visible=True )
    # MetadataElement( name="column_names", default=[], desc="Column names", visible=True )
    # MetadataElement(name="pheCols", default=[], desc="Select list for potentially interesting variables", visible=True)
    # MetadataElement( name="base_name",
                     # desc="base name for all transformed versions of this expression dataset", default='rexpression', set_in_upload=True)
    # MetadataElement( name="pheno_path", desc="Path to phenotype data for this experiment", default="rexpression.pheno", visible=True)
    file_ext = 'huba'
    composite_type = 'auto_primary_file'

    def __init__( self, **kwd ):
        Text.__init__(self, **kwd)
        self.add_composite_file( 'hub.txt' )
        self.add_composite_file( 'genomes.txt' )
        self.add_composite_file( 'trackDb.txt' )

    def generate_primary_file( self, dataset=None ):
        """
        This is called only at upload to write the html file
        cannot rename the datasets here - they come with the default unfortunately
        """
        return '<html><head></head><body>AutoGenerated Primary File for Composite Dataset</body></html>'

    def regenerate_primary_file(self, dataset):
        """
        cannot do this until we are setting metadata
        """
        bn = dataset.metadata.base_name
        flist = os.listdir(dataset.extra_files_path)
        rval = ['<html><head><title>Files for Composite Dataset %s</title></head><p/>Comprises the following files:<p/><ul>' % (bn)]
        for i, fname in enumerate(flist):
            sfname = os.path.split(fname)[-1]
            rval.append( '<li><a href="%s">%s</a>' % ( sfname, sfname ) )
        rval.append( '</ul></html>' )
        f = file(dataset.file_name, 'w')
        f.write("\n".join( rval ))
        f.write('\n')
        f.close()

    def set_peek( self, dataset, is_multi_byte=False ):
        if not dataset.dataset.purged:
            dataset.peek = "Bowtie index file (%s)" % ( dataset.metadata.sequence_space )
            dataset.blurb = "%s space" % ( dataset.metadata.sequence_space )
        else:
            dataset.peek = 'file does not exist'
            dataset.blurb = 'file purged from disk'

    def display_peek( self, dataset ):
        try:
            return dataset.peek
        except:
            return "Bowtie index file"

    def sniff( self, filename ):
        return False
